JAVA

Jdk is needed in order to develop the code 
Jre is required to just execute the java program - provides env and tools to execute the java program

IDE Eclipse

JVM - Java Virtual Machine provides an env. to run java applications. JVM interprets the byte code into machine code which is executed in the machine in which the java programs run

JRE - Java Runtime Environment contains libraries and software needed by your Java programs to run, JREE combines java code with the required libraries as an when required to startJVM to execute the java code

JDK - Java Development Kit is a softwaredevelopment env. used to develop java applications.
It contains JRE , interpreter/loader , a java compiler(javac), an archiver (jar), a documentation generator (javadoc) accompanied by many other tools
Java supports compiler as well as interpreter

JRE+other componenets = JDK

														verification using byte code verifier													
Source Code ----> Byte Code (understood by JVM) ---> JVM										-----> Native Code ---> Native Code Executed Step by step using the JVM interpreter
			Javac								CL - Class loader								JRT Compiler
	
JVM Internal
	-> Class Loader + Byte Code Verifier
	
		Execution Engine - JVM Interpreter 
							JIT Compiler
							Thread Manager
							Memory Manager
							Garbage Collector - de allocating the used memory

Data Area 
-> stack 
-> heap
-> method
-> Register - calculations
	
Objects stored on the heap area
Primitive variables stored on the stack area


class First{
	public static void main(String[] args){
		System.out.println("Hello!");
	}
}

in cmd -> to compile the code 
	--> javac <filename>
	output of the javac command is a byte code
	it creates a file with an extension of .class
	
	--> we need to tell the JVM to load the class 
	
	--> java First (in cmd)
	
Only one class can be declared as a public class


	LocalDate.now() -- gives the current date of the system
	
	
	
	
package java demos;

class NumberCheck {

int displayBigNumber(int numl, int num2, int num3) {

int biggestNumber;

if (num1 > num2) {

if (num1 > num3) {

biggestNumber = numi;

biggestNumber num3;

} } else {

if (num2 num3) {

biggestNumber = num2;

} else {

biggestNumber num3;

}

}

return biggestNumber;

public class MainProgram {

public static void main(String[] args) {

System.out.println(new NumberCheck().displayBigNumber(11, 18, 7));




Conversions ( from higher datatype to lower datatype and vice versa)

Widening - Lower to higher

Narrowing - Higher to lower - these lose information about the overall magnitude of a numeric value

	This should be explicit using typecasting
	
	Boolean can't be casted to any typecasting
	Boolean can't be treated as an integer like in other languages
	
Wrapper classes



Objects 

State - state of an object

Behaviour - it changes the state of the object


Netbanking
transfer amnt
check balance
check accnt status

Object : Account
states : balance, status
Methods : checkStatus(), transfer(), chackBalance()

Abstraction: 

to achieve abstraction 
we use classes


Class : 
	- Blueprint of an object ==> create many objects
	- It defines which type of object to be created. It is a logical entity which is instanced once an object is created.
		class contains fields, methods, constructor, interfaces, nested classes
	

When we create a class,
 - object states are called instance variables
 - object behaviours are called as methods



-------------------------------------------------Example----------------------------------------------------------------------------------------------



package Javademo;

public class Account{
	int accountNumber;
	String name;
	double balance;
	
	// Behavior == methods
	// 3 types of methods 
	//  - Constructors
	//	- Getters an Setters
	//	- Business Methods
	
	
	
	//1. constructor - responsible to initialize the fields which are mandatory and which are read only
	// 					name of this method is same as the name of the class
	// 					does not return anything
	// Functionally this should be called at the time of account creation
	//   i.e. Account a1 = new Account(101,"Gyan");
	//		  Account a2 = new Account(); - default constructors - doesn't have any parameter
	// if we have 0 constructors, then java implicitly provides a default constructor
	
	
	// default Constructor
	Account(){
		
	}
	// Parameterized constructor
	Account(int accNo, String ownerName){
		this.accountNumber = accNo;
		this.name = ownerName;
	}
	
	// getter
	// setter
	// to read and write the property of the fields
	// setters should be present for only those values whose values change
	// in short value is already set inside the constructor, so no need to set the value again
	
	
	//
	void setBalance(double balance) {
		this.balance = balance;
	}
	
	String getName() {
		return name;
	}
	double getBalance() {
		return balance;
	}
	
	// 3. business methods
	double deposit(double amount) {
		this.balance+=amount;
		return this.balance;
	}
	double withdraw(double amount) {
		if(this.balance>=amount) {
			this.balance -= amount;
		}
		
		return this.balance;
	}
}




------------------------------------------------------------------------------------------------------------------------------------------------------

Encapsulation - we hide the internal state of an object and requiring all the interactions to bve performed using object methods
	- we hide the data, and all the inetraction to be done with the methods of the object
	
	- we can enable the data encapsulation using access specifiers 
		public and private 
		- Public means the method is applicable to anyone
		- Private means 
		
	- State should be private and methods should be public 
	
Abstraction - Focus on important properties and ignore irrelevant information


Inheritence - One calss can inherit state and behavior from other
			
	- To do some alteration / modification
	- Reusability
	- Extension
	
Ovrriding - we do do alteration / modification using this methods

Polymorphism - An object can have many forms in different context

	- Method Overloading - static poly
	- Method Overriding - dynamic poly 
	
-----------------------------------------------------------------------------------------------------------------------------------------------------
//using object specifiers



package Javademo;

public class Account{
	private int accountNumber;
	private String name;
	private double balance;
	
	// Behavior == methods
	// 3 types of methods 
	//  - Constructors
	//	- Getters an Setters
	//	- Business Methods
	
	
	
	//1. constructor - responsible to initialize the fields which are mandatory and which are read only
	// 					name of this method is same as the name of the class
	// 					does not return anything
	// Functionally this should be called at the time of account creation
	//   i.e. Account a1 = new Account(101,"Gyan");
	//		  Account a2 = new Account(); - default constructors - doesn't have any parameter
	// if we have 0 constructors, then java implicitly provides a default constructor
	
	
	// default Constructor
	Account(){
		
	}
	// Parameterized constructor
	Account(int accNo, String ownerName){
		this.accountNumber = accNo;
		this.name = ownerName;
	}
	
	// getter
	// setter
	// to read and write the property of the fields
	// setters should be present for only those values whose values change
	// in short value is already set inside the constructor, so no need to set the value again
	
	
	//
	/* void setBalance(double balance) {
		this.balance = balance;
	}
	*/
	public int getAccountNumber() {
		return accountNumber;
	}
	
	public String getName() {
		return name;
	}
	public double getBalance() {
		return balance;
	}
	
	// 3. business methods
	public double deposit(double amount) {
		this.balance+=amount;
		return this.balance;
	}
	public double withdraw(double amount) {
		if(this.balance>=amount) {
			this.balance -= amount;
		}
		
		return this.balance;
	}
}



package Javademo;

public class Client {
	public static void main(String[] args) {
		Account account = new Account(100, "Gyan");
		System.out.println(account.getAccountNumber());
		System.out.println(account.getName());
		System.out.println(account.getBalance());
		account.deposit(4000);
		System.out.println(account.getBalance());
	}
}

-------------------------------------------------------------------------------------------------------------
Encapsulation - Data Hiding
- process of wrapping the code and data together as a single unit known as data model class or 



Advantages of OOPS - 
-> Modularity
-> Information-hiding
-> Code re-use
-> Plug ability and debugging ease


Access Scopes
 - used to implement encapsulation
 
 1. At the class level - public or default 
 2. At the member level - public, private , protected, default (no explicit modifier)
 
 
 
 Modifier 	Class	Package		Subclass 	World
 
 public		  Y		   Y			Y		  Y
 protected	  Y        Y            Y         N
 no modifier  Y        Y            N         N
 private	  Y        N            N         N
 
 
 Class Modifier - Abstract or Final
 Variable Modifier - final,static,transient,volatile
 
 
 
 Variables - 
	Instance - life of this variable is until the object is not destroyed
		per instance of the class object
		initialized as soon as the object is ready
		can have access modifiers like public, private and protected
	
	Static or Class variables - life until the class is not unloaded from the jvm
		declared using static modifier
		initialized when class is loaded into the JVM memory and will have the same value for all instance
	
	Local - inside a method - life of this local variable is until this is inside a method
		local in scope and not visible outside of the declared block
		Final Local variables are visible from inside of anonymous inner class


Static member
	- Class member variable
	- Class member method
	- Block

	Static mmber can be called directly using the class name, it doesn't need an instance to be created
	Local variable cannot be static
	If you want to have variables that are common for all objects we need to use static modifier
	
	Static modifier, in combination with the final modifier, is also used to define constants
		public static final double PI 3.14159265;
		-- Final variable value can not be re initialized
	
	Static variables are accessible throught the static methods
	
	Static Methods 
		Can access class variables and class methods directly
		Cannot access instance variables or instance methods directly - they must use an object reference
		cannot use this keyword as "this" keyword refers to the current class - "this" is for the current instance and it can't be used for the 
	
	
	Aggregation 
		Special Form of association
		relationship between 2 classes
		One way relationship
		Has - A relationship
		
		-- We define the instance of a class inside the parent class
		
		
Constructor 

	Constructors called using the new keyword
	Cannot have any return tyoe and also it cannot be static, abstract, final or synchronized
	Access modifiers like public, private, protected  and default can be used while declaring  constructor
	
	There are
		Default Constructors
		Parameterized Constructors
	Overloading can be done by providing different type of variables to the constructors
	
	this keyword - used to remove the ambiguity between the local and instance variables
	- helps us to identify the instance variables
	- can be used for chaining the constructors by using the overloading and passing the parameters and calling the constructors
	
	
	Overloading
		No of Parameters
		Types of Parmeters
		Order of Parameters
		Should be Different
------------------------------------Constructor Overloading----------------------------------------------------------------------------------------------------
	
	
	package Javademo;

public class point2D {
	private int xCord;
	private int yCord;
	//Default Constructor
	public point2D() {
		this.xCord = 0;
		this.yCord = 0;
	}
	//Parameterized Constructor
	public point2D(int value) {
		this.xCord = value;
		this.yCord = value;
	}
	//Parameterized Constructor
	public point2D(int xVal, int yVal) {
		this.xCord = xVal;
		this.yCord = yVal;
	}
	
	
	// We performed Overloading of Constructors
}

-----------------------------------------------------------------------------------------------------------------------------------------------------

Inheritence
	Superclass - Class which is extended
	SubClass - Class which extends the superclass
- IS A relationship

- extends keyword is used 
	provides Runtime polymorphism and method overriding
	
- In absence of any other superclass, every class is an implici subclass 
of java.lang.object
			|
	public class Account{}
			|
	public class Residential extends Account{}
			|
	public class Business ectends Account{}
	
Multiple inheritence is not supported in Java


super.val - helps us to access any value present in the superclass


----------------------------------------------------------------------------------------------------------------------------------------------------------


Conversion of Reference types

Super() links the constructor from the child to the parent constructor



Runtime Polymorphism

package Javademo;

class Animal{
	void whoAmI() {
		System.out.println("I am a generic animal");
	}
}
class Dog extends Animal{
	void whoAmI() {
		System.out.println("I am a Dog");
	};
}
class Cow extends Animal{
	void whoAmI() {
		System.out.println("I am a Cow");
	};
}
class Snake extends Animal{
	void whoAmI() {
		System.out.println("I am a Snake");
	};
}
public class dynamicPoly {
	public static void main(String[] args) {
		Animal [] animals = {new Cow(),new Snake(), new Dog(),new Animal()};
		for(Animal animal:animals) {
			animal.whoAmI();
		}
	}
}


O/P

I am a Cow
I am a Snake
I am a Dog
I am a generic animal

Method Overriding

An instance method in a subclass with the same signatur as an instance ethod in the super class is called method overriding
	-> method name must be same
	-> Parameters (type, number and order) must be the same
	-> Return type is either same or subtype. - known as covariant return type
	-> Access modifier either same or higher access modifier

@Override - this annotation is a signal to the compiler to check if the signature of the overriden funcation mathches the signature 
of the function in the parent



Variable Arguments (Varargs)

Var - args allows the method to accept zero or multiple arguments


final modifier - 

	- we can use the keyword final in a method declaration to indicate that the method can't be overriden by subclasses
	- we can declare some or all of the methods of the class as final
	- java.lang.object class does this - a number of it methods are final
	- we can also declare an entire class as final
	- this prevents the class from being subclasses
	- this is particularly useful for creating an immutable class like the string class

we can apply final keyword on 


	1. variables (instance/local) - constant
	2. methods - can't be overriden
	3. classes - can't be inherited



Abstract Class and Interface



// concrete methtod
public void add(){
	int x = a+b;
}

//abstract method
public abstract void add()



Abstract Class
	if a class contains even a single abstract method, it has to defined as an abstract class
	instance can't be created for an abstract class

	Sit 1: If we have a abstract class a with an abstract method in it
	then a class b is extending the class a , then we need to provide a body for the abstract method of the parent class
	else if you dont want to provide the body then b should be made abstract
	
	Abstract methods should always be overrided
	
	
	-- Rules in a nutshell
	
	-> Abstract class can be subclassed
	-> Abstract class instance can't be created
	-> A subclass extending an abstract class should provide the body for the abstract methods 
	-> if its not providing the body, then it should be declared as an abstract method
	-> Abstract methods should always be overriden
	
Realtime Example fo abstract Class

	Passport head office(Delhi) ==> Abstract Class
		1. verification			==> abstract
		2. approval				==> concrete
	
	Local passport Offices		==> Subclass
		- Mumbai (Aadhar)
		- Chennai (PAN)
	
	
	If any restriction is to be set for the child classes and methods 
	then we will need abstract classes
	- Dictate strict protocol/rule to the subclass
	- subclasses have their own way of implementation
	
	

Interfaces
-- Common protocol for all types of subclasses

If a class consists of all methods which are abstract, then this class can be declared as an interface

Is a contract to the client to know all the behaviors the object has(except how they are being implemented)


	Interfaces cannot be instantiated - they can only be implemented by classes or extended by other interfaces
	When an instantiable class implements an interface, it provides the method body for each of the methods declared in the interface
	
	If a class does not implement all the methods of an interface, that class should be declared as abstract.
	
	All the variables declared inside an interface are declared as constants 
	
	
	static variables can be accessed without the creating any object
	-> A class can extend one class and implement any number of interfaces at the same time
	-> A class can extend one class and implement any number of interfaces at the same time
	-> A class can implement multiple interfaces
	
	i.e. public class Car extends motorizedVehicle implements iVehicle {
	
	Abstract Class vS Interface
	
	-> If the classes which exted the base class have common methods, fields or have access modifiers like protected or private
	-> where classes can modify the state of the object to which they belong by having non static no final fields in the base class
	
	Interface
	
	-> When we want to have industry standard API' having complex methid signatures but implementation differ from product to product or company to company
	-> When we want to take advantage of multiple inheritence
	-> When implementing class is unrelated and is not tightly coupled to have implementation part mandatory
	
	
	
	
	
	
	
	
	
	
	
	
	
	---------------------------------------------------------------------------------------
	
	Exception Handling
	
	
	
	Steps after exception is occured??

1. JVM collect all info about exception

1. method name 2. line number

3. class name

4. issue details

5. time and date of exception

2. JVM stores all info in an object (exception object) 3. Exception object will be passed to your method. (throw)

4. Your method can handle the exception or pass it to higher method 5. Your higher method will handle exception or pass it to JVM

6. If exception reaches to JVM then JVM will abnormally terminate your program.



------------------------------------------------------------------------------------------------------------------------------------------------------



Scanner scanner = new Scanner(System.in);
String name = scanner.nextLine(); -- Method which excepts a string
					nextLine accepts nothing also - space
System.out.println();


scnner.next() doesn't accept space as an input
scanner.nextInt();

------------------------------------------------------------------------------------------------------------------------------------------------------
Inner Classes


Anonymous Inner Class - Java anonymous inner class is an inner class without a name and for which only a single object is created. 
An anonymous inner class can be useful when making an instance of an object with certain "extras" such as overloading methods of a class 
or interface, without having to actually subclass a class.

In simple words, a class that has no name is known as an anonymous inner class in Java. It should be used if you have to override a method of class or interface. Java Anonymous inner class can be created in two ways:

Class (may be abstract or concrete).
Interface


Static Elements:



Static Inner Classes : 




--------------------------------------------------------------------------------------------------------------------------------------------------------------------


Access Specifier use is not allowed in Interfaces 


Whenever we are using an object only once , we can use anonymous object



Anonymous inner class in Java

when to you use a static inner class?
	a recommendation is to declare a class as static if and only if all the methods and variables inside the class are static.
	In real life we would not want some values to be dependent on objects, in those cases we will need static 9inner class.
	
Final Keyword
	
	
Every Datatype in Java except String is treated as a primitive datatype, String is treated as a class



Always use .equals() method in place of using == for comapring 2 things

---------------------------------------------------------------------------------------------------------------------------------------------------------

String Literals vs String Objects 

---------------------------------------------------------------------------------------------------------------------------------------------------------

Collections in Java

---------------------------------------------------------------------------------------------------------------------------------------------------------

Threads and Concurrency



Sockets
Processors 


Logical Processors - threads
	Runnable Threads
	Running Threads
	Waiting for blocked thread
	
	
New Thread() - New State -> start()	-> Runnable State()
					  run() returns			|	run()
					Terminated state <-	Running state()	
											|sleep(),wait(),yield()
										BLocked/waiting state

Thread States:

	Threads can be in different states during their lifecycle, such as:
	
	New: When a thread is instantiated but not yet started.
	
	Runnable: When the thread is ready to run and waiting for CPU time.
	
	Blocked/Waiting: When a thread is waiting for a resource (e.g., I/O operation) or for another thread to notify it.
	
	Terminated: When a thread completes its execution.

Thread Synchronization:

	Threads may access shared resources concurrently, which can lead to data inconsistency or race conditions. 
	
	Synchronization mechanisms like synchronized blocks, wait() and notify() methods, and Lock interfaces help 
	
	coordinate access to shared resources and prevent conflicts.
	
Thread Communication:

	Threads can communicate and coordinate their activities through shared memory 
	
	(using synchronized methods or blocks) or message passing (using concurrent data structures like BlockingQueue).

										
										
Understanding Threads

package Threads;

import static java.lang.Thread.sleep;

class myCounter extends Thread{
    private int threadNo;
    public myCounter(int threadNo){
        this.threadNo = threadNo;
    }
    @Override
    public void run(){
        try {
            countMe();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
    }
    public void countMe() throws InterruptedException {
        for(int i = 0; i<10; i++){
            sleep(500);
            System.out.println("thread no: "+threadNo+" and itr no: "+i);
        }
    }
}
public class Main {
    public static void main(String[] args) throws InterruptedException {
        myCounter ctr1 = new myCounter(1);
        myCounter ctr2 = new myCounter(2);
        myCounter ctr3 = new myCounter(3);

        long startTime = System.currentTimeMillis();

        ctr1.start();
        System.out.println("*********************");
        ctr2.start();
        ctr3.start();
        long endTime = System.currentTimeMillis();
        sleep(5210);
        System.out.println("total time required for processing: " + (endTime-startTime));
    }
}


Approach 2


package Threads;

import static java.lang.Thread.sleep;
import java.util.Random;

class myCounter implements Runnable{
    private int threadNo;
    public myCounter(int threadNo){
        this.threadNo = threadNo;
    }


    @Override
    public void run() {
        for(int i = 0; i < 10; i++){
            try {
                Random random = new Random();
                sleep(random.nextInt(500));
            }catch(InterruptedException e){
                e.printStackTrace();
            }
            System.out.println("thread no: "+threadNo+" and itr no: "+i);
        }
    }
}
public class Main {
    public static void main(String[] args) throws InterruptedException {
        Thread thread1  = new Thread(new myCounter(1));
        Thread thread2  = new Thread(new myCounter(2));
        thread1.start();
        thread2.start();
    }
}


Approach 3

package Threads;

import static java.lang.Thread.sleep;
import java.util.Random;

public class Main {
    public static void main(String[] args) throws InterruptedException {
        new Thread(new Runnable(){
            @Override
            public void run() {
                for(int i = 0; i < 10; i++){
                    try {
                        Random random = new Random();
                        sleep(random.nextInt(500));
                    }catch(InterruptedException e){
                        e.printStackTrace();
                    }
                    System.out.println(i);
                }
            }
        }).start();
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------

Synchronizattion under Concurrency Control

Syncronized keyword is used where we can restrict the pausing of the method and it will be running the method in a synchronized fashion
so whenever we are calling a method, the entire method will finish its execution then only it will be clled by any other thread'


Static Synchronization
Whenever you dont want the method to be accessed by multiple instances and you want the 
method to be absolutely synchronized throughout everywhere in the application regardless of objects static is the correct way to do so


Volatile Keyword

It is used to stop the caching of the thread 

Wait and Notify in Java

-- The application will until the deposit of money has happended and then only the withdrawal method will be called


In Java, the wait() method is used in conjunction with notify() and notifyAll() for inter-thread communication in synchronization. 
When a thread calls wait(), it relinquishes the lock it holds and enters a wait state until another thread notifies it.

The wait() method can throw a InterruptedException if another thread interrupts the waiting thread while it's waiting. 
This interruption can occur for various reasons, such as when another thread calls interrupt() on the waiting thread.

Therefore, when calling wait(), it's necessary to handle InterruptedException to properly deal with interruption scenarios. 

In the catch block, you can decide how to handle the interruption, which might involve logging the exception, cleaning up resources, or taking other appropriate action.

It's important to handle InterruptedException properly because it's a checked exception, meaning that if you don't catch it,
 you'll need to declare it in the method signature using throws InterruptedException, which can propagate the exception up the 
 call stack, potentially leading to unintended consequences.
 
 
 ------------------------------------------------------------------------------------------------------------------------------------------
 
 Concurrency control in JAVA using JOINS
 
you're starting a new thread (thread1) to increment the ctr1 variable in a loop. 
However, you're immediately printing the value of ctr1 after starting the thread. 
Since the increment operation in the thread is asynchronous, the println statement might execute before the 
thread finishes its job. As a result, you might not see the expected incremented value of ctr1.


package Threads;

public class Joins {
    public static int ctr1 = 0;
    public static void main(String[] args){
        Thread thread1 = new Thread(new Runnable() {
            @Override
            public void run() {
                for(int i = 0; i< 1000;i++){
                    ctr1++;
                }
            }
        });
        thread1.start();
        System.out.println(ctr1);
    }
}

If you want to ensure that the println statement executes after the thread has finished its job, you can use the join() method. 
The join() method waits for the thread to complete its execution before moving on.



NOTE -

In Java, when you start a new thread using Thread.start(), the code inside the run() method of that thread runs 
concurrently with the rest of your program.

Concurrency means that multiple tasks can make progress together, seemingly simultaneously, 
without any one task needing to completely finish before the next one starts. 
In the case of your code, the main thread and the thread1 are running concurrently.

Here's how it works in your code:

The main thread starts thread1 by calling thread1.start().
thread1 executes the code inside its run() method concurrently with the main thread.
Meanwhile, the main thread continues its execution without waiting for thread1 to finish. 
It immediately moves to the next statement, which is the println statement.
The println statement prints the current value of ctr1, which is initially 0.

Eventually, thread1 finishes its execution, but since the main thread has already printed the value of ctr1, 
you may not see the updated value.
To summarize, concurrency allows multiple threads to execute code simultaneously, enabling tasks to make 
progress independently of each other. In your code, thread1 runs concurrently with the main thread, potentially 
leading to non-deterministic behavior if proper synchronization mechanisms are not used.


When you call join() on a thread, it means you're explicitly waiting for that thread to complete its execution.
 During this waiting period, if another thread interrupts the waiting thread (by calling interrupt() on it), 
 the waiting thread will throw an InterruptedException.

Handling InterruptedException is important because it indicates that the waiting thread has been interrupted, and you need to 
decide how to respond to this interruption. You might want to clean up resources, perform logging, or take other appropriate actions.

Therefore, when you call join(), you need to handle InterruptedException either by catching it using a try-catch block 
or by declaring it in the method signature using throws InterruptedException.


-------------------------------------------------------------------------------------------------------------------------------------------

Thread Pools

Scheduling thread execution can help us with a lot of resource saving and efficient execution of the application 
Because hardware has limits when we are using a multithreaded application	

Executor Service - Handles the number of threads that need to run concurrently on the basis of user input
	it needs to be shut down manually, to stop the service
	
	
CountDown Latch in Multithreading

	
	 
-------------------------------------------------------------------------------------------------------------------------------------------

JSP 

Expression
Scriptlet
Declaration
Directive
Comment




